#Conditional Hooks
$Application: FS2_Open
$On Game Init:
[

rocketUiIcons = {}

local async_util = require("async_util")

function RocketUiSystem:setIconFrames(item, is_ship)
	
	local ship3d, shipEffect, shipicon3d = ui.ShipWepSelect.get3dShipChoices()
	local weapon3d, weaponEffect, weaponicon3d = ui.ShipWepSelect.get3dWeaponChoices()
	
	local gen3d = false
	
	if (shipicon3d and is_ship) or (weaponicon3d and not is_ship) then
		gen3d = true
	end
	
	local icon_details = {
		Icon = {}
	}
	
	--Create a texture and then draw to it, save the output
	if gen3d then
		
		local model_h = nil
		local modelDetails = {
			width = nil,
			height = nil,
			heading = nil,
			pitch = nil,
			bank = nil,
			zoom = nil
		}

		if is_ship == true then
			model_h = tb.ShipClasses[item]
			modelDetails.width = 128
			modelDetails.height = 112
			modelDetails.heading = 50
			modelDetails.pitch = 15
			modelDetails.bank = 0
			modelDetails.zoom = 1.1
		else
			model_h = tb.WeaponClasses[item]
			modelDetails.width = 112
			modelDetails.height = 48
			modelDetails.heading = 75
			modelDetails.pitch = 0
			modelDetails.bank = 40
			modelDetails.zoom = 0.4
		end

		local tex_h = gr.createTexture(modelDetails.width, modelDetails.height)
		gr.setTarget(tex_h)
		for j = 1, 6, 1 do
			gr.clearScreen(0,0,0,0)
			model_h:renderTechModel(0, 0, modelDetails.width, modelDetails.height, modelDetails.heading, modelDetails.pitch, modelDetails.bank, modelDetails.zoom, false)
			icon_details.Icon[j] = gr.screenToBlob()
		end
		icon_details.Width = modelDetails.width
		icon_details.Height = modelDetails.height
		
		--clean up
		gr.setTarget()
		tex_h:unload()
	else
		--Create a texture and then draw to it, save the output
		local imag_h = nil
		
		if is_ship == true then
			imag_h = gr.loadTexture(tb.ShipClasses[item].SelectIconFilename , true, true)
		else
			imag_h = gr.loadTexture(tb.WeaponClasses[item].SelectIconFilename , true, true)
		end
		
		local width = imag_h:getWidth()
		local height = imag_h:getHeight()
		local tex_h = gr.createTexture(width, height)
		gr.setTarget(tex_h)
		for j = 1, 6, 1 do
			gr.clearScreen(0,0,0,0)
			gr.drawImage(imag_h[j], 0, 0, width, height, 0, 1, 1, 0, 1)
			icon_details.Icon[j] = gr.screenToBlob()
		end
		icon_details.Width = width
		icon_details.Height = height
		
		--clean up
		gr.setTarget()
		imag_h:unload()
		tex_h:unload()
	end

	rocketUiIcons[item] = icon_details

end

function RocketUiSystem:genIcons()

	ba.print("RocketUI is starting generation of ship and weapon loadout icons!\n")
	
	local yieldTS = time.getCurrentTime()
	local splashTime = time.getCurrentTime()

	if RocketUiSystem.initIcons == true then
		return
	end

	for i = 1, #tb.WeaponClasses do

		v = tb.WeaponClasses[i]

		if v:hasCustomData() then
			if v.CustomData["PlayerWeapon"] == "true" then
				RocketUiSystem:setIconFrames(v.Name, false)
				 if (time.getCurrentTime() - yieldTS):getSeconds() > 0.1 then
                    yieldTS = time.getCurrentTime()
                    async.await(async.yield())
                    RocketUiSystem:drawSplash()
                end
			end
		end

	end

	--make sure the splash logo is shown for at least 2 seconds
	while ((splashTime - yieldTS):getSeconds() * -1) < 2 do
		if (time.getCurrentTime() - yieldTS):getSeconds() > 0.1 then
			yieldTS = time.getCurrentTime()
			async.await(async.yield())
			RocketUiSystem:drawSplash()
		end
	end
	
	--switch to the second splash image
	RocketUiSystem.splash.i = 2
	splashTime = time.getCurrentTime()

	for i = 1, #tb.ShipClasses do

		v = tb.ShipClasses[i]

		if v:hasCustomData() then
			if v.CustomData["PlayerShip"] == "true" then
				RocketUiSystem:setIconFrames(v.Name, true)
				if (time.getCurrentTime() - yieldTS):getSeconds() > 0.1 then
                    yieldTS = time.getCurrentTime()
                    async.await(async.yield())
                    RocketUiSystem:drawSplash()
                end
			end
		end

	end
	
	--make sure the splash logo is shown for at least 2 seconds
	while ((splashTime - yieldTS):getSeconds() * -1) < 2 do
		if (time.getCurrentTime() - yieldTS):getSeconds() > 0.1 then
			yieldTS = time.getCurrentTime()
			async.await(async.yield())
			RocketUiSystem:drawSplash()
		end
	end

	ba.print("RocketUI successfully generated ship and weapon loadout icons!\n")

	gr.freeAllModels()
	
	RocketUiSystem.initIcons = true
	
	io.setCursorHidden(false)
end

function RocketUiSystem:prepareSplash()

	RocketUiSystem.splash = {}
	RocketUiSystem.splash.img = {}
	
	--first splash image
	local file = "fsolua.png"
	
	--screen center coords
	local x = gr.getScreenWidth() / 2
	local y = gr.getScreenHeight() / 2
	
	--scale the image
	local scale = math.min((gr.getScreenWidth() * 0.5)/gr.getImageWidth(file), (gr.getScreenHeight() * 0.5)/gr.getImageHeight(file))
	
	local w = gr.getImageWidth(file) * scale
	local h = gr.getImageHeight(file) * scale
	
	--save the first image
	RocketUiSystem.splash.img[1] = {}
	RocketUiSystem.splash.img[1].File = file
	RocketUiSystem.splash.img[1].X = x
	RocketUiSystem.splash.img[1].Y = y
	RocketUiSystem.splash.img[1].W = w
	RocketUiSystem.splash.img[1].H = h
	
	--second splash image
	file = "SCPUI.png"
	
	--screen center coords
	x = gr.getScreenWidth() / 2
	y = gr.getScreenHeight() / 2
	
	--scale the image
	scale = math.min((gr.getScreenWidth() * 0.8)/gr.getImageWidth(file), (gr.getScreenHeight() * 0.8)/gr.getImageHeight(file))
	
	w = gr.getImageWidth(file) * scale
	h = gr.getImageHeight(file) * scale
	
	--save the second image
	RocketUiSystem.splash.img[2] = {}
	RocketUiSystem.splash.img[2].File = file
	RocketUiSystem.splash.img[2].X = x
	RocketUiSystem.splash.img[2].Y = y
	RocketUiSystem.splash.img[2].W = w
	RocketUiSystem.splash.img[2].H = h
	
	local text = "Loading"
	local tw = gr.getStringWidth(text)
	
	--save the text data
	RocketUiSystem.splash.Text = text
	RocketUiSystem.splash.TX = x - (tw / 2)
	RocketUiSystem.splash.TY = h + (h * 0.01)
	RocketUiSystem.splash.TW = tw
	RocketUiSystem.splash.F = 1
	
	--start with the first image
	RocketUiSystem.splash.i = 1

end

function RocketUiSystem:drawSplash()

	io.setCursorHidden(true)

	gr.clearScreen(0, 0, 0, 255)
	
	--save the current color and set to white
	local r, g, b, a = gr.getColor()
	gr.setColor(255, 255, 255, 255)
	
	--calculate the number of dots to append
	local dots = "."
	if RocketUiSystem.splash.F == 1 then
		RocketUiSystem.splash.F = 2
	elseif RocketUiSystem.splash.F == 2 then
		dots = ".."
		RocketUiSystem.splash.F = 3
	else
		dots = "..."
		RocketUiSystem.splash.F = 1
	end
	
	local img = RocketUiSystem.splash.i
	
	local file = RocketUiSystem.splash.img[img].File
	local x = RocketUiSystem.splash.img[img].X
	local y = RocketUiSystem.splash.img[img].Y
	local w = RocketUiSystem.splash.img[img].W
	local h = RocketUiSystem.splash.img[img].H
	
	local text = RocketUiSystem.splash.Text .. dots
	
	--draw!
	gr.drawImageCentered(file, x, y, w, h)
	gr.drawString(text, RocketUiSystem.splash.TX, RocketUiSystem.splash.TY)
	
	--reset the color back to what it was.
	gr.setColor(r, g, b, a)

end

function RocketUiSystem:firstRun()
	RocketUiSystem:prepareSplash()
	
	RocketUiSystem:drawSplash()
	
	RocketUiSystem.initIcons = false
    async.awaitRunOnFrame(function()
        async.await(async.yield())
        RocketUiSystem:genIcons()
    end)

end

if RocketUiSystem.initIcons == nil then
        RocketUiSystem:firstRun()
    end

]

#End